<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Noisebridge Learning Python</title><link href="http://www.pycourse.com/" rel="alternate"></link><link href="http://www.pycourse.com/feeds/all-en.atom.xml" rel="self"></link><id>http://www.pycourse.com/</id><updated>2013-07-02T14:00:00-07:00</updated><entry><title>Generators in Python</title><link href="http://www.pycourse.com/posts/2013/Jul/02/generators-in-python/" rel="alternate"></link><updated>2013-07-02T14:00:00-07:00</updated><author><name>Kellan</name></author><id>tag:www.pycourse.com,2013-07-02:posts/2013/Jul/02/generators-in-python/</id><summary type="html">&lt;div class="section" id="iteration"&gt;
&lt;h2&gt;Iteration&lt;/h2&gt;
&lt;p&gt;In python objects such as strings, lists and dictionaries iterable. Simplified we can loop over them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Strings&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kellan Jacobs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="c"&gt;# Lists&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="c"&gt;# Same for Dictionaries&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kellan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jacobs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the hood python is calling the objects &lt;tt class="docutils literal"&gt;__iter__&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__next__&lt;/tt&gt; methods. Take the following code sample&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mylist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Kellan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jacobs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python changes this into a while loop that looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mylist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Kellan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jacobs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;StopIternation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="vocabulary-time"&gt;
&lt;h2&gt;Vocabulary Time&lt;/h2&gt;
&lt;p&gt;There are two words I will use over and over. It is important to define them here.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Iterator&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Is good for one pass over the data. It has both a &lt;tt class="docutils literal"&gt;__iter__&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__next__&lt;/tt&gt; method defined. The data is exausted after one pass over the data.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Iterable&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;An Iterable is an object that has a &lt;tt class="docutils literal"&gt;__iter__&lt;/tt&gt; method and returns an iterator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Lets do it again&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another example trying to print a matrix using these iterators.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# c2 = Counter(3)&lt;/span&gt;
&lt;span class="c"&gt;# c3 = Counter(3)&lt;/span&gt;

&lt;span class="c"&gt;# for x in c2:&lt;/span&gt;
&lt;span class="c"&gt;#     for y in c3:&lt;/span&gt;
&lt;span class="c"&gt;#         print x, y&lt;/span&gt;

&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets do the same thing but with an iterable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generators"&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;Generators are functions that return iterator and contains a yield statement. When python hits a yield statement it suspends processing remembering the state of the function. They are used with a for loop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun_gen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;generate&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fun_gen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generator functions return a generator object. Where a normal function returns none. Generators are lazy they don't actually do any work unitl the next() method is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fun_gen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets create the simple counter as a generator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;
        &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generators can also be created as part of an object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the side effects of creating a generator as an object is they can be reused as long as your object doesn't store the state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we save state in the object it can't be used more than once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-to-think-about-using-generators"&gt;
&lt;h2&gt;When to think about using generators&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When you are tight on memory.&lt;/li&gt;
&lt;li&gt;When use are using a result list&lt;/li&gt;
&lt;li&gt;When you will only need to iterate over the data set once&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="generator-gotcha-s"&gt;
&lt;h2&gt;Generator Gotcha's&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generators may be slower than a list&lt;/li&gt;
&lt;li&gt;Generators don't have a length&lt;/li&gt;
&lt;li&gt;Generators always evaluate to true&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Deploy Tutorial May 14, 2013</title><link href="http://www.pycourse.com/posts/2013/May/13/deployment-tutorial/" rel="alternate"></link><updated>2013-05-13T22:00:00-07:00</updated><author><name>Kellan</name></author><id>tag:www.pycourse.com,2013-05-13:posts/2013/May/13/deployment-tutorial/</id><summary type="html">&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This week in class we are going to take are going to do a simple deployment using &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/"&gt;pelican&lt;/a&gt; and &lt;a class="reference external" href="http://docs.fabfile.org/en/1.6/"&gt;fabric&lt;/a&gt;. The goal of this weeks lecture is is to introduce you to fabric and actually get something running using it. I have created a simply &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/"&gt;pelican&lt;/a&gt; blog install at my &lt;a class="reference external" href="https://github.com/kellanjacobs/deploy-tutorial"&gt;deploy tutorial&lt;/a&gt; repo.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Installing PostgreSQL on Mac OSX 10.8</title><link href="http://www.pycourse.com/posts/2013/Jan/16/installing-postgresql-macosx/" rel="alternate"></link><updated>2013-01-16T14:00:00-08:00</updated><author><name>Kellan</name></author><id>tag:www.pycourse.com,2013-01-16:posts/2013/Jan/16/installing-postgresql-macosx/</id><summary type="html">&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; is a powerful open source relational database system. &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; is the database system we will use in this class. These are the steps I took to get &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; running on a default of OSX 10.8. These instructions should also work for OSX 10.7 with a little modification. If you are running a different version of MacOS you should be able to adapt these instructions for you version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-command-line-utilities"&gt;
&lt;h2&gt;Install Command Line Utilities&lt;/h2&gt;
&lt;p&gt;Before we can start installing software on our Macintosh's we need to install the Linux tools required.&lt;/p&gt;
&lt;p&gt;Open Safari and download &lt;a class="reference external" href="https://developer.apple.com/downloads/index.action"&gt;Command Line tools for XCode&lt;/a&gt; This package installs the command line compilers and libraries needed in this class.&lt;/p&gt;
&lt;p&gt;You will need to register at the developer site but registration is free. After you have downloaded the &lt;a class="reference external" href="https://developer.apple.com/downloads/index.action"&gt;Command Line tools for XCode&lt;/a&gt; locate the file and double click on the .dmg that you downloaded. Next double click on the installer and proceed with the install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-homebrew"&gt;
&lt;h2&gt;Install Homebrew&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; is a mac utility that allows you to download and compile many command line utilities. It uses formulas to make the process as painless as possible. Open up terminal and type the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;ruby -e &amp;quot;$(curl -fsSkL raw.github.com/mxcl/homebrew/go)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One the install is complete you will need to make sure everything got installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;brew doctor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The brew doctor command will check to make sure your system is ready to use &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;homebrew&lt;/a&gt; Resolve any errors that you receive and run the command again. Once your system is ready you will see.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;brew doctor&lt;/span&gt;
&lt;span class="go"&gt;Your system is raring to brew.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-postgresql"&gt;
&lt;h2&gt;Install PostgreSQL&lt;/h2&gt;
&lt;p&gt;The great part of installing &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;homebrew&lt;/a&gt; is that the next steps get easier. Lets now install &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt;. In the terminal type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;brew install postgresql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the install completes we will need to do a couple of simple configurations. First we are going to initialize the database system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;initdb /usr/local/var/postgres&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the database has initialized next we want to tell our Macintosh to restart &lt;a class="reference external" href="http://postgresql.org"&gt;postgresql&lt;/a&gt; when we restart our computer. These commands get typed on the console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;mkdir -p ~/Library/LaunchAgents&lt;/span&gt;
&lt;span class="go"&gt;ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents&lt;/span&gt;
&lt;span class="go"&gt;launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should be ready to use &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt;. The next step is to make sure our install worked and you can actually create databases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;createdb mytestdb&lt;/span&gt;
&lt;span class="go"&gt;psql mytestdb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything went well you should now be logged in to your newly created database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;psql (9.1.7)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;mytestdb=#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type q to exit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;psql (9.1.7)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;mytestdb=# \q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-psycopg2"&gt;
&lt;h2&gt;Installing Psycopg2&lt;/h2&gt;
&lt;p&gt;Next we need to install the &lt;a class="reference external" href="http://www.python.org"&gt;python&lt;/a&gt; bindings for PostgreSQL. SQLAlchemy requires that we use the Psycopg library. Open back up your terminal and type the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;pip install psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you did not install python from homebrew you will need to type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;pip install psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets check our work and make sure that &lt;a class="reference external" href="http://initd.org/psycopg/"&gt;Psycopg&lt;/a&gt; installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are returned to the &amp;gt;&amp;gt;&amp;gt; prompt than everything went fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-sqlalchemy"&gt;
&lt;h2&gt;Installing SQLAlchemy&lt;/h2&gt;
&lt;p&gt;The last piece we need to install is &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;pip install sqlalchemy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again if you are not using python from &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;homebrew&lt;/a&gt; you will need to use sudo at the begining of the line.&lt;/p&gt;
&lt;p&gt;Again lets check our work and make sure SQLAlchemy installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Advanced Class Dojo Notes 2013-01-12</title><link href="http://www.pycourse.com/posts/2013/Jan/12/dojo-notes/" rel="alternate"></link><updated>2013-01-12T14:00:00-08:00</updated><author><name>Kellan</name></author><id>tag:www.pycourse.com,2013-01-12:posts/2013/Jan/12/dojo-notes/</id><summary type="html">&lt;div class="section" id="internet-relay-chat"&gt;
&lt;h2&gt;Internet Relay Chat&lt;/h2&gt;
&lt;p&gt;Internet Relay Chat is how many open source communities. We setup an IRC client and helped everyone register a unique nickname.&lt;/p&gt;
&lt;p&gt;Mac uses can use &lt;a class="reference external" href="http://colloquy.info/"&gt;Colloquy&lt;/a&gt; or &lt;a class="reference external" href="http://adium.im/"&gt;Adium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux users can use &lt;a class="reference external" href="http://xchat.org/"&gt;xChat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows User can use &lt;a class="reference external" href="http://xchat.org/"&gt;xChat&lt;/a&gt; or &lt;a class="reference external" href="http://www.mirc.com/"&gt;mIRC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We all logged into freenode and joined the channel #pyclass We will be using this channel in future classes. Everyone will need to register their nick&lt;/p&gt;
&lt;p&gt;To register your nick type the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;/msg NickServ register password email@address.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Liz gave us general tips to be a good IRC citizen&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stack-overflow"&gt;
&lt;h2&gt;Stack Overflow&lt;/h2&gt;
&lt;p&gt;Liz introduced the website &lt;a class="reference external" href="http://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt; This is a great place to go and find answers to questions and also answer questions. All of us who are in the Advanced Python Class do have the skills to answer some of the questions on &lt;a class="reference external" href="http://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can contribute to open source not only by writing code but by answering questions. This is really a great way to be a part of a community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mailing-lists"&gt;
&lt;h2&gt;Mailing Lists&lt;/h2&gt;
&lt;p&gt;All open source projects use mailing lists. You can join the mailing list for the projects you want to contribute to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-groups"&gt;
&lt;h2&gt;User Groups&lt;/h2&gt;
&lt;/div&gt;
</summary></entry><entry><title>Installing PostgreSQL on Ubuntu 12.04</title><link href="http://www.pycourse.com/posts/2013/Jan/10/installing-postgresql-ubuntu/" rel="alternate"></link><updated>2013-01-10T14:00:00-08:00</updated><author><name>Kellan</name></author><id>tag:www.pycourse.com,2013-01-10:posts/2013/Jan/10/installing-postgresql-ubuntu/</id><summary type="html">&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; is a powerful open source relational database system. &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; is the database system we will use in this class. These are the steps I took to get &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; running on a default of &lt;a class="reference external" href="http://www.ubuntu.com"&gt;Ubuntu&lt;/a&gt; 12.04. These instructions should also work for Ubuntu 12.10. If you are running a different version of Linux you should be able to adapt these instructions for you distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-postgresql"&gt;
&lt;h2&gt;Installing PostgreSQL&lt;/h2&gt;
&lt;p&gt;The first step to installing anything new is to make sure that your system has all the latest security patches. Open your terminal and run the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;sudo apt-get update&lt;/span&gt;
&lt;span class="go"&gt;sudo apt-get upgrade --show-upgraded&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we are actually going to install &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt;. This will install PostgreSQL server, PostgreSQL client and a few modules that makes working with PostgreSQL easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;sudo apt-get install postgresql postgresql-contrib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-security"&gt;
&lt;h2&gt;Configuring Security&lt;/h2&gt;
&lt;p&gt;By default &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt; creates a system user and only allows that user to connect to the database server. If we were deploying live we might select a different security method, but since this is for local development we are going add our personal username to the list of allowed users. You should replace my username kellan with your own username.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;sudo -u postgres createuser&lt;/span&gt;
&lt;span class="go"&gt;Enter name of role to add: kellan&lt;/span&gt;
&lt;span class="go"&gt;Shall the new role be a superuser? (y/n) y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We gave the user superuser privileges while we are in development to make working easier. This would not be a good practice in deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-database"&gt;
&lt;h2&gt;Creating a Database&lt;/h2&gt;
&lt;p&gt;Now that you have given yourself permissions you should be ready to use &lt;a class="reference external" href="http://postgresql.org"&gt;PostgreSQL&lt;/a&gt;. The next step is to make sure our install worked and you can actually create databases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;createdb mytestdb&lt;/span&gt;
&lt;span class="go"&gt;psql mytestdb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything went well you should now be logged in to your newly created database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;psql (9.1.7)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;mytestdb=#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type q to exit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;psql (9.1.7)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;mytestdb=# \q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-psycopg2"&gt;
&lt;h2&gt;Installing Psycopg2&lt;/h2&gt;
&lt;p&gt;Next we need to install the &lt;a class="reference external" href="http://www.python.org"&gt;python&lt;/a&gt; bindings for PostgreSQL. SQLAlchemy requires that we use the Psycopg library. Open back up your terminal and type the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;sudo apt-get install python-psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets check our work and make sure that &lt;a class="reference external" href="http://initd.org/psycopg/"&gt;Psycopg&lt;/a&gt; installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are returned to the &amp;gt;&amp;gt;&amp;gt; prompt than everything went fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-sqlalchemy"&gt;
&lt;h2&gt;Installing SQLAlchemy&lt;/h2&gt;
&lt;p&gt;The last piece we need to install is &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;. We need to install python development package and python-setuptools. We are adding build-essential because it setups the basics we need to do development on ubuntu. Several packages that we will use in this class will be easier to install if we install this now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;sudo apt-get install python-dev python-setuptools build-essential&lt;/span&gt;
&lt;span class="go"&gt;sudo easy_install sqlalchemy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again lets check our work and make sure SQLAlchemy installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>